saisachinkovuru@Sais-MacBook-Pro api % go test -v -cover 
=== RUN   TestAddCourse
=== RUN   TestAddCourse/Empty_JSON_Data

Mock API for Add Course - Sending Empty Data
[GIN] 2022/04/01 - 02:30:43 | 400 |     407.125µs |                 | POST     /api/v1/addCourse
{"error":"EOF"}


    course_test.go:65: Expected to get status 200 but instead got 400
=== RUN   TestAddCourse/Course_ID_Already_exists

Mock API for Add Course - Sending the existing CourseID
[GIN] 2022/04/01 - 02:30:43 | 400 |    2.445333ms |                 | POST     /api/v1/addCourse
{"error":"Course already exists with the same course ID"}


    course_test.go:88: Expected to get status 200 but instead got 400
=== RUN   TestAddCourse/Unique_Course_ID

Mock API for Add Course - Sending the unique CourseID
[GIN] 2022/04/01 - 02:30:43 | 200 |    1.445625ms |                 | POST     /api/v1/addCourse
{"message":"Success"}


    course_test.go:109: Expected to get status 200 is same ast 200
--- PASS: TestAddCourse (0.01s)
    --- PASS: TestAddCourse/Empty_JSON_Data (0.00s)
    --- PASS: TestAddCourse/Course_ID_Already_exists (0.00s)
    --- PASS: TestAddCourse/Unique_Course_ID (0.00s)
=== RUN   TestGetCourses
=== RUN   TestGetCourses/Wrong_URL

Mock API for getCourses - Sending wrong URL
[GIN] 2022/04/01 - 02:30:43 | 404 |         167ns |                 | GET      /api/v1/courses
404 page not found


    course_test.go:149: Expected to get status 200 but instead got 404
=== RUN   TestGetCourses/Valid_URL

Mock API for getCourses - Sending correct URL
[GIN] 2022/04/01 - 02:30:43 | 200 |     545.459µs |                 | GET      /api/v1/course


{"data":[{"idCourse":1000,"coursename":"SE","idDepartment":111,"idFaculty":20,"facultyname":"Alin Dobra","deptName":"CSE"},{"idCourse":1001,"coursename":"HCI Research","idDepartment":111,"idFaculty":21,"facultyname":"Sharon Chu","deptName":"CSE"},{"idCourse":1002,"coursename":"DBSI","idDepartment":111,"idFaculty":20,"facultyname":"Alin Dobra","deptName":"CSE"},{"idCourse":1003,"coursename":"HCI Practical","idDepartment":111,"idFaculty":22,"facultyname":"Pedro Guillermo Feijóo-García","deptName":"CSE"},{"idCourse":1004,"coursename":"Occupational Safety Engineering","idDepartment":112,"idFaculty":23,"facultyname":"Boyi Hu","deptName":"Industrial and Systems Engineering"},{"idCourse":1005,"coursename":"Fundamental of Machine-Learning","idDepartment":113,"idFaculty":24,"facultyname":"Catia Silva","deptName":"Electrical Engineering"},{"idCourse":1006,"coursename":"Introduction to Python","idDepartment":114,"idFaculty":25,"facultyname":"Kutsal Dogan","deptName":"Info Systems and Operation Management"},{"idCourse":1007,"coursename":"Data Measurement and Analysis","idDepartment":115,"idFaculty":26,"facultyname":"Mark Shaplak","deptName":"Mechanical/Aerospace Engineering"},{"idCourse":1008,"coursename":"Operating Systems","idDepartment":111,"idFaculty":20,"facultyname":"Alin Dobra","deptName":"CSE"}]}


    course_test.go:170: Expected to get status 200 is same ast 200
--- PASS: TestGetCourses (0.00s)
    --- PASS: TestGetCourses/Wrong_URL (0.00s)
    --- PASS: TestGetCourses/Valid_URL (0.00s)
=== RUN   TestGetCourseById
=== RUN   TestGetCourseById/Incorrect_CourseID

Mock API for getCourseById - Sending the incorrect CourseID
[GIN] 2022/04/01 - 02:30:43 | 400 |     358.542µs |                 | GET      /api/v1/course/111


{"error":"Could not find this Course ID in our records"}


    course_test.go:211: Expected to get status 200 but instead got 400
=== RUN   TestGetCourseById/Correct_UserID

Mock API for getCourseById - Sending correct CourseID
[GIN] 2022/04/01 - 02:30:43 | 200 |     190.416µs |                 | GET      /api/v1/course/1000


{"data":{"idCourse":1000,"coursename":"SE","idDepartment":111,"idFaculty":20,"facultyname":"Alin Dobra","deptName":"CSE"}}


    course_test.go:231: Expected to get status 200 is same ast 200
--- PASS: TestGetCourseById (0.00s)
    --- PASS: TestGetCourseById/Incorrect_CourseID (0.00s)
    --- PASS: TestGetCourseById/Correct_UserID (0.00s)
=== RUN   TestUpdateCourse
=== RUN   TestUpdateCourse/Sending_Empty_Data

Mock API for Update Course - Sending Empty Data
[GIN] 2022/04/01 - 02:30:43 | 400 |     307.917µs |                 | PUT      /api/v1/course/1000
{"error":"EOF"}


    course_test.go:273: Expected to get status 200 but instead got 400
=== RUN   TestUpdateCourse/Existing_Course_ID

Mock API for Update Course - Sending the existing Course ID
[GIN] 2022/04/01 - 02:30:43 | 200 |     154.458µs |                 | PUT      /api/v1/course/1000
{"message":"Success"}


    course_test.go:294: Expected to get status 200 is same ast 200
=== RUN   TestUpdateCourse/Incorrect_Course_ID

Mock API for Update Course - Sending incorrect CourseID
[GIN] 2022/04/01 - 02:30:43 | 400 |       36.25µs |                 | PUT      /api/v1/course/77
{"error":"Could not find this Course ID in our records to Update"}


    course_test.go:318: Expected to get status 200 but instead got 400
--- PASS: TestUpdateCourse (0.00s)
    --- PASS: TestUpdateCourse/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateCourse/Existing_Course_ID (0.00s)
    --- PASS: TestUpdateCourse/Incorrect_Course_ID (0.00s)
=== RUN   TestAddDepartment
=== RUN   TestAddDepartment/Sending_Empty_Data

Mock API for Add Department -  Sending Empty Data
[GIN] 2022/04/01 - 02:30:43 | 400 |        6.75µs |                 | POST     /api/v1/addDept
{"error":"EOF"}


    department_test.go:61: Expected to get status 200 but instead got 400
=== RUN   TestAddDepartment/Department_ID_Already_exists

Mock API for Add Department - Sending the existing DepartmentID
[GIN] 2022/04/01 - 02:30:43 | 400 |     549.375µs |                 | POST     /api/v1/addDept
{"error":"Department already exists with the same department ID"}


    department_test.go:84: Expected to get status 200 but instead got 400
=== RUN   TestAddDepartment/Unique_Department_ID

Mock API for Add Department - Sending the unique DepartmentID
[GIN] 2022/04/01 - 02:30:43 | 200 |     597.042µs |                 | POST     /api/v1/addDept
{"message":"Success"}


    department_test.go:105: Expected to get status 200 is same ast 200
--- PASS: TestAddDepartment (0.00s)
    --- PASS: TestAddDepartment/Sending_Empty_Data (0.00s)
    --- PASS: TestAddDepartment/Department_ID_Already_exists (0.00s)
    --- PASS: TestAddDepartment/Unique_Department_ID (0.00s)
=== RUN   TestGetDepartment
=== RUN   TestGetDepartment/Wrong_URL

Mock API for getDepartments - Sending wrong URL
[GIN] 2022/04/01 - 02:30:43 | 404 |         208ns |                 | GET      /api/v1/departments
404 page not found


    department_test.go:145: Expected to get status 200 but instead got 404
=== RUN   TestGetDepartment/Valid_URL

Mock API for getDepartments - Sending correct URL
[GIN] 2022/04/01 - 02:30:43 | 200 |     373.708µs |                 | GET      /api/v1/department


{"data":[{"idDepartment":111,"deptName":"CSE"},{"idDepartment":112,"deptName":"Industrial and Systems Engineering"},{"idDepartment":113,"deptName":"Electrical Engineering"},{"idDepartment":114,"deptName":"Info Systems and Operation Management"},{"idDepartment":115,"deptName":"Mechanical/Aerospace Engineering"},{"idDepartment":117,"deptName":"Arts"}]}


    department_test.go:166: Expected to get status 200 is same ast 200
--- PASS: TestGetDepartment (0.00s)
    --- PASS: TestGetDepartment/Wrong_URL (0.00s)
    --- PASS: TestGetDepartment/Valid_URL (0.00s)
=== RUN   TestGetDepartmentById
=== RUN   TestGetDepartmentById/Incorrect_DepartmentID

Mock API for getDepartmentById - Sending the incorrect Department ID
[GIN] 2022/04/01 - 02:30:43 | 400 |     283.917µs |                 | GET      /api/v1/department/1111


{"error":"Could not find this Department ID in our records"}


    department_test.go:207: Expected to get status 200 but instead got 400
=== RUN   TestGetDepartmentById/Correct_DepartmentID

Mock API for getDepartmentById - Sending correct departmentID
[GIN] 2022/04/01 - 02:30:43 | 200 |       28.25µs |                 | GET      /api/v1/department/111


{"data":{"idDepartment":111,"deptName":"CSE"}}


    department_test.go:227: Expected to get status 200 is same ast 200
--- PASS: TestGetDepartmentById (0.00s)
    --- PASS: TestGetDepartmentById/Incorrect_DepartmentID (0.00s)
    --- PASS: TestGetDepartmentById/Correct_DepartmentID (0.00s)
=== RUN   TestUpdateDepartment
=== RUN   TestUpdateDepartment/Sending_Empty_Data

Mock API for Update Department - Sending Empty Data
[GIN] 2022/04/01 - 02:30:43 | 400 |     282.333µs |                 | PUT      /api/v1/department/111
{"error":"EOF"}


    department_test.go:269: Expected to get status 200 but instead got 400
=== RUN   TestUpdateDepartment/Existing_Department_ID

Mock API for Update Department - Sending the existing Department ID
[GIN] 2022/04/01 - 02:30:43 | 200 |     242.708µs |                 | PUT      /api/v1/department/111
{"message":"Success"}


    department_test.go:290: Expected to get status 200 is same ast 200
=== RUN   TestUpdateDepartment/Incorrect_Department_ID

Mock API for Update Department - Sending incorrect DepartmentID
[GIN] 2022/04/01 - 02:30:43 | 400 |      26.417µs |                 | PUT      /api/v1/department/77
{"error":"Could not find this Department ID in our records to Update"}


    department_test.go:314: Expected to get status 200 but instead got 400
--- PASS: TestUpdateDepartment (0.00s)
    --- PASS: TestUpdateDepartment/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateDepartment/Existing_Department_ID (0.00s)
    --- PASS: TestUpdateDepartment/Incorrect_Department_ID (0.00s)
=== RUN   TestDeleteDepartment
=== RUN   TestDeleteDepartment/Department_ID_does_not_exist

Mock API for Deleting the Department - Sending the wrong DepartmentID
[GIN] 2022/04/01 - 02:30:43 | 400 |     269.375µs |                 | DELETE   /api/v1/department/77


{"error":"Could not find this Department ID in our records to Delete"}


    department_test.go:354: Expected to get status 200 but instead got 400
=== RUN   TestDeleteDepartment/Department_ID_exists

Mock API for Deleting the User - Sending the valid DepartmentID
[GIN] 2022/04/01 - 02:30:43 | 200 |     988.458µs |                 | DELETE   /api/v1/department/117


{"message":"Success"}


    department_test.go:376: Expected to get status 200 is same ast 200
--- PASS: TestDeleteDepartment (0.00s)
    --- PASS: TestDeleteDepartment/Department_ID_does_not_exist (0.00s)
    --- PASS: TestDeleteDepartment/Department_ID_exists (0.00s)
=== RUN   TestAddFaculty
=== RUN   TestAddFaculty/Empty_JSON_Data

Mock API for Add Faculty- Sending Empty Data
[GIN] 2022/04/01 - 02:30:43 | 400 |        5.25µs |                 | POST     /api/v1/addFaculty
{"error":"EOF"}


    faculty_test.go:67: Expected to get status 200 but instead got 400
=== RUN   TestAddFaculty/Faculty_ID_Already_exists

Mock API for Add Faculty - Sending the existing FacultyID
[GIN] 2022/04/01 - 02:30:43 | 400 |     577.084µs |                 | POST     /api/v1/addFaculty
{"error":"faculty already exists with the same faculty ID"}


    faculty_test.go:90: Expected to get status 200 but instead got 400
=== RUN   TestAddFaculty/Unique_Faculty_ID

Mock API for Add Faculty - Sending the unique FacultyID
[GIN] 2022/04/01 - 02:30:43 | 400 |     229.125µs |                 | POST     /api/v1/addFaculty
{"error":"faculty already exists with the same faculty ID"}


    faculty_test.go:113: Expected to get status 200 but instead got 400
--- PASS: TestAddFaculty (0.00s)
    --- PASS: TestAddFaculty/Empty_JSON_Data (0.00s)
    --- PASS: TestAddFaculty/Faculty_ID_Already_exists (0.00s)
    --- PASS: TestAddFaculty/Unique_Faculty_ID (0.00s)
=== RUN   TestGetFaculty
=== RUN   TestGetFaculty/Wrong_URL

Mock API for getFaculty - Sending wrong URL
[GIN] 2022/04/01 - 02:30:43 | 404 |         250ns |                 | GET      /api/v1/facultys
404 page not found


    faculty_test.go:151: Expected to get status 200 but instead got 404
=== RUN   TestGetFaculty/Valid_URL

Mock API for getFaculty - Sending correct URL
[GIN] 2022/04/01 - 02:30:43 | 200 |     345.709µs |                 | GET      /api/v1/faculty


{"data":[{"idFaculty":20,"facultyname":"Alin Dobra","idDepartment":111,"info":"https://www.ratemyprofessors.com/ShowRatings.jsp?tid=535689","deptName":"CSE"},{"idFaculty":21,"facultyname":"Sharon Chu","idDepartment":111,"info":"https://www.ratemyprofessors.com/ShowRatings.jsp?tid=2522904","deptName":"CSE"},{"idFaculty":22,"facultyname":"Pedro Guillermo Feijóo-García","idDepartment":111,"info":"https://www.pfeijoo.com/","deptName":"CSE"},{"idFaculty":23,"facultyname":"Boyi Hu","idDepartment":112,"info":"https://www.ratemyprofessors.com/ShowRatings.jsp?tid=2481816","deptName":"Industrial and Systems Engineering"},{"idFaculty":24,"facultyname":"Catia Silva","idDepartment":113,"info":"https://www.ratemyprofessors.com/ShowRatings.jsp?tid=2565118","deptName":"Electrical Engineering"},{"idFaculty":25,"facultyname":"Kutsal Dogan","idDepartment":114,"info":"https://www.ratemyprofessors.com/ShowRatings.jsp?tid=2704225","deptName":"Info Systems and Operation Management"},{"idFaculty":26,"facultyname":"Mark Shaplak","idDepartment":115,"info":"https://www.ratemyprofessors.com/ShowRatings.jsp?tid=352844","deptName":"Mechanical/Aerospace Engineering"}]}


    faculty_test.go:172: Expected to get status 200 is same ast 200
--- PASS: TestGetFaculty (0.00s)
    --- PASS: TestGetFaculty/Wrong_URL (0.00s)
    --- PASS: TestGetFaculty/Valid_URL (0.00s)
=== RUN   TestGetFacultyById
=== RUN   TestGetFacultyById/Incorrect_FacultyID

Mock API for getFacultyById - Sending the incorrect FacultyID
[GIN] 2022/04/01 - 02:30:43 | 400 |     511.458µs |                 | GET      /api/v1/faculty/111


{"error":"Could not find this Faculty ID in our records"}


    faculty_test.go:213: Expected to get status 200 but instead got 400
=== RUN   TestGetFacultyById/Correct_FacultyID

Mock API for getFacultyById - Sending correct FacultyID
[GIN] 2022/04/01 - 02:30:43 | 200 |      69.791µs |                 | GET      /api/v1/faculty/20


{"data":{"idFaculty":20,"facultyname":"Alin Dobra","idDepartment":111,"info":"https://www.ratemyprofessors.com/ShowRatings.jsp?tid=535689","deptName":"CSE"}}


    faculty_test.go:233: Expected to get status 200 is same ast 200
--- PASS: TestGetFacultyById (0.00s)
    --- PASS: TestGetFacultyById/Incorrect_FacultyID (0.00s)
    --- PASS: TestGetFacultyById/Correct_FacultyID (0.00s)
=== RUN   TestUpdateFaculty
=== RUN   TestUpdateFaculty/Sending_Empty_Data

Mock API for Update Faculty - Sending Empty Data
[GIN] 2022/04/01 - 02:30:43 | 400 |     301.542µs |                 | PUT      /api/v1/faculty/20
{"error":"EOF"}


    faculty_test.go:275: Expected to get status 200 but instead got 400
=== RUN   TestUpdateFaculty/Existing_Faculty_ID

Mock API for Update Faculty  - Sending the existing Faculty ID
[GIN] 2022/04/01 - 02:30:43 | 200 |     564.875µs |                 | PUT      /api/v1/faculty/20
{"message":"Success"}


    faculty_test.go:296: Expected to get status 200 is same ast 200
=== RUN   TestUpdateFaculty/Incorrect_Faculty_ID

Mock API for Update Faculty - Sending incorrect FacultyID
[GIN] 2022/04/01 - 02:30:43 | 400 |     104.667µs |                 | PUT      /api/v1/faculty/77
{"error":"Could not find this faculty ID in our records to Update"}


    faculty_test.go:320: Expected to get status 200 but instead got 400
--- PASS: TestUpdateFaculty (0.00s)
    --- PASS: TestUpdateFaculty/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateFaculty/Existing_Faculty_ID (0.00s)
    --- PASS: TestUpdateFaculty/Incorrect_Faculty_ID (0.00s)
=== RUN   TestLogin
=== RUN   TestLogin/Invalid_JSON_Data

Mock API for User Login - Sending the InvalidJson

[GIN] 2022/04/01 - 02:30:43 | 400 |     224.291µs |                 | POST     /api/v1/login
{"msg":"invalid json"}


    login_test.go:54: Expected to get status 200 but instead got 400
=== RUN   TestLogin/Invalid_EmailID

Mock API for User Login - Sending the Invalid EmailID

[GIN] 2022/04/01 - 02:30:43 | 401 |       1.009ms |                 | POST     /api/v1/login
{"msg":"Invalid User credentials!! Please verify the entered Email/Password"}


    login_test.go:83: Expected to get status 200 but instead got 401
=== RUN   TestLogin/Invalid_Password

Mock API for User Login - Sending the Invalid Password

crypto/bcrypt: hashedPassword is not the hash of the given password
[GIN] 2022/04/01 - 02:30:44 | 401 |   77.139125ms |                 | POST     /api/v1/login
{"msg":"Invalid User credentials!! Please verify the entered Email/Password"}


    login_test.go:112: Expected to get status 200 but instead got 401
=== RUN   TestLogin/Valid_Credentials

Mock API for User Login - Sending the Valid Credentials

crypto/bcrypt: hashedPassword is not the hash of the given password
[GIN] 2022/04/01 - 02:30:44 | 401 |   75.656125ms |                 | POST     /api/v1/login
{"msg":"Invalid User credentials!! Please verify the entered Email/Password"}


    login_test.go:141: Expected to get status 200 but instead got 401
--- PASS: TestLogin (0.15s)
    --- PASS: TestLogin/Invalid_JSON_Data (0.00s)
    --- PASS: TestLogin/Invalid_EmailID (0.00s)
    --- PASS: TestLogin/Invalid_Password (0.08s)
    --- PASS: TestLogin/Valid_Credentials (0.08s)
=== RUN   TestAddUser
=== RUN   TestAddUser/Empty_JSON_Data

Mock API for Add User - Sending Empty Data
[GIN] 2022/04/01 - 02:30:44 | 400 |     222.459µs |                 | POST     /api/v1/register
{"error":"EOF"}


    user_test.go:83: Expected to get status 200 but instead got 400
=== RUN   TestAddUser/Email_ID_Already_exists

Mock API for Add User - Sending the existing EmailID
[GIN] 2022/04/01 - 02:30:44 | 400 |     879.334µs |                 | POST     /api/v1/register
{"error":"Student already exists with the same email"}


    user_test.go:106: Expected to get status 200 but instead got 400
=== RUN   TestAddUser/Unique_Email_ID

Mock API for Add User - Sending the unique EmailID
[GIN] 2022/04/01 - 02:30:44 | 200 |   78.145834ms |                 | POST     /api/v1/register
{"message":"Success"}


    user_test.go:127: Expected to get status 200 is same ast 200
--- PASS: TestAddUser (0.08s)
    --- PASS: TestAddUser/Empty_JSON_Data (0.00s)
    --- PASS: TestAddUser/Email_ID_Already_exists (0.00s)
    --- PASS: TestAddUser/Unique_Email_ID (0.08s)
=== RUN   TestGetUsers
=== RUN   TestGetUsers/Wrong_URL

Mock API for getUsers - Sending wrong URL
[GIN] 2022/04/01 - 02:30:44 | 404 |         250ns |                 | GET      /api/v1/userss
404 page not found


    user_test.go:167: Expected to get status 200 but instead got 404
=== RUN   TestGetUsers/Valid_URL

Mock API for getUsers - Sending correct URL
[GIN] 2022/04/01 - 02:30:44 | 200 |         486µs |                 | GET      /api/v1/user


{"data":[{"idStudent":1,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"","email":"kovuru.saisachin@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":""},{"idStudent":2,"firstname":"Prashant","lastname":"Kapri","department":111,"password":"","email":"kapri.prashant@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/prashant-kapri-2b8047122/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":""},{"idStudent":3,"firstname":"Maitreyi","lastname":"Srinivasan","department":111,"password":"","email":"maitreyi.srinivas@ufl.edu","gender":"female","course":"Research methods in HCI","url":"https://www.linkedin.com/ms100","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":""},{"idStudent":4,"firstname":"Noopur","lastname":"Thanvi","department":111,"password":"","email":"thanvi.noopur@ufl.edu","gender":"female","course":"Database systems implementation","url":"https://www.linkedin.com/in/noopurthanvi0208/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":""},{"idStudent":5,"firstname":"Anirudh","lastname":"Srinivasan","department":112,"password":"","email":"anirudh.srinivas@ufl.edu","gender":"male","course":"Occupational Safety Engineering","url":"https://www.linkedin.com/in/anirudh-srinivasan-46149119a/","nationality":"Indian","profile":"Safety Engineer","specialization":"Info and Operations Management","status":"incoming","deptName":""},{"idStudent":6,"firstname":"Dhrupad","lastname":"Thanvi","department":113,"password":"","email":"thanvi.dhrupad@ufl.edu","gender":"male","course":"Fundamental of Machine-Learning","url":"https://www.linkedin.com/in/noopurthanvi0208/","nationality":"Indian","profile":"Interested in Electrical Domain","specialization":"Electrical Engineering","status":"incoming","deptName":""},{"idStudent":7,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"","email":"unique@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":""}]}


    user_test.go:188: Expected to get status 200 is same ast 200
--- PASS: TestGetUsers (0.00s)
    --- PASS: TestGetUsers/Wrong_URL (0.00s)
    --- PASS: TestGetUsers/Valid_URL (0.00s)
=== RUN   TestGetUserswithDept
=== RUN   TestGetUserswithDept/Wrong_URL

Mock API for getUserswithDepartment - Sending wrong URL
[GIN] 2022/04/01 - 02:30:44 | 404 |         209ns |                 | GET      /api/v1/userss
404 page not found


    user_test.go:228: Expected to get status 200 but instead got 404
=== RUN   TestGetUserswithDept/Valid_URL

Mock API for getUserswithDepartment - Sending correct URL
[GIN] 2022/04/01 - 02:30:44 | 200 |     502.709µs |                 | GET      /api/v1/users


{"data":[{"idStudent":1,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"","email":"kovuru.saisachin@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":"CSE"},{"idStudent":2,"firstname":"Prashant","lastname":"Kapri","department":111,"password":"","email":"kapri.prashant@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/prashant-kapri-2b8047122/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":"CSE"},{"idStudent":3,"firstname":"Maitreyi","lastname":"Srinivasan","department":111,"password":"","email":"maitreyi.srinivas@ufl.edu","gender":"female","course":"Research methods in HCI","url":"https://www.linkedin.com/ms100","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":"CSE"},{"idStudent":4,"firstname":"Noopur","lastname":"Thanvi","department":111,"password":"","email":"thanvi.noopur@ufl.edu","gender":"female","course":"Database systems implementation","url":"https://www.linkedin.com/in/noopurthanvi0208/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":"CSE"},{"idStudent":5,"firstname":"Anirudh","lastname":"Srinivasan","department":112,"password":"","email":"anirudh.srinivas@ufl.edu","gender":"male","course":"Occupational Safety Engineering","url":"https://www.linkedin.com/in/anirudh-srinivasan-46149119a/","nationality":"Indian","profile":"Safety Engineer","specialization":"Info and Operations Management","status":"incoming","deptName":"Industrial and Systems Engineering"},{"idStudent":6,"firstname":"Dhrupad","lastname":"Thanvi","department":113,"password":"","email":"thanvi.dhrupad@ufl.edu","gender":"male","course":"Fundamental of Machine-Learning","url":"https://www.linkedin.com/in/noopurthanvi0208/","nationality":"Indian","profile":"Interested in Electrical Domain","specialization":"Electrical Engineering","status":"incoming","deptName":"Electrical Engineering"},{"idStudent":7,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"","email":"unique@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":"CSE"}]}


    user_test.go:249: Expected to get status 200 is same ast 200
--- PASS: TestGetUserswithDept (0.00s)
    --- PASS: TestGetUserswithDept/Wrong_URL (0.00s)
    --- PASS: TestGetUserswithDept/Valid_URL (0.00s)
=== RUN   TestGetUserById
=== RUN   TestGetUserById/Incorrect_UserID

Mock API for getUserById - Sending the incorrect UserID
[GIN] 2022/04/01 - 02:30:44 | 400 |     486.334µs |                 | GET      /api/v1/user/111


{"error":"Could not find this student ID in our records"}


    user_test.go:290: Expected to get status 200 but instead got 400
=== RUN   TestGetUserById/Correct_UserID

Mock API for getUserById - Sending correct userID
[GIN] 2022/04/01 - 02:30:44 | 200 |     107.959µs |                 | GET      /api/v1/user/1


{"data":{"idStudent":1,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"$2a$10$sTns3LM.xfAEzlsF0fUPDOabxvuL.lFPuhVIuRqSfmCAZrzZlWmvO","email":"kovuru.saisachin@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active","deptName":""}}


    user_test.go:310: Expected to get status 200 is same ast 200
--- PASS: TestGetUserById (0.00s)
    --- PASS: TestGetUserById/Incorrect_UserID (0.00s)
    --- PASS: TestGetUserById/Correct_UserID (0.00s)
=== RUN   TestGetUserByEmail
=== RUN   TestGetUserByEmail/Incorrect_User_EmailID

Mock API for getUserByEmail - Sending the incorrect User Email ID
[GIN] 2022/04/01 - 02:30:44 | 400 |         297µs |                 | GET      /api/v1/mail/kovuru.sachin@ufl.edu


{"error":"Could not find this student Email ID in our records"}


    user_test.go:352: Expected to get status 200 but instead got 400
=== RUN   TestGetUserByEmail/Correct_User_EmailID

Mock API for getUserByEMail - Sending correct user Email-ID
[GIN] 2022/04/01 - 02:30:44 | 200 |     114.833µs |                 | GET      /api/v1/mail/kovuru.saisachin@ufl.edu


{"data":{"idStudent":1,"firstname":"SaiSachin","lastname":"Kovuru","department":0,"password":"","email":"","gender":"","course":"","url":"","nationality":"","profile":"","specialization":"","status":"","deptName":""}}


    user_test.go:372: Expected to get status 200 is same ast 200
--- PASS: TestGetUserByEmail (0.00s)
    --- PASS: TestGetUserByEmail/Incorrect_User_EmailID (0.00s)
    --- PASS: TestGetUserByEmail/Correct_User_EmailID (0.00s)
=== RUN   TestUpdateUser
=== RUN   TestUpdateUser/Sending_Empty_Data

Mock API for Update User - Sending Empty Data
[GIN] 2022/04/01 - 02:30:44 | 400 |     277.125µs |                 | PUT      /api/v1/user/1
{"error":"EOF"}


    user_test.go:414: Expected to get status 200 but instead got 400
=== RUN   TestUpdateUser/Email_ID_Already_exists

Mock API for Update User - Sending the existing EmailID
[GIN] 2022/04/01 - 02:30:44 | 400 |     407.458µs |                 | PUT      /api/v1/user/6
{"error":"Email can not be Updated since student with another ID has the same mail ID"}


    user_test.go:437: Expected to get status 200 but instead got 400
=== RUN   TestUpdateUser/Unique_Email_ID

Mock API for Update User - Sending the unique EmailID
[GIN] 2022/04/01 - 02:30:44 | 200 |   77.568125ms |                 | PUT      /api/v1/user/1
{"message":"Success"}


    user_test.go:458: Expected to get status 200 is same ast 200
=== RUN   TestUpdateUser/Incorrect_Student_ID

Mock API for Update User - Sending incorrect StudentID
[GIN] 2022/04/01 - 02:30:44 | 400 |     119.583µs |                 | PUT      /api/v1/user/77
{"error":"Could not find this student ID in our records to Update"}


    user_test.go:482: Expected to get status 200 but instead got 400
--- PASS: TestUpdateUser (0.08s)
    --- PASS: TestUpdateUser/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateUser/Email_ID_Already_exists (0.00s)
    --- PASS: TestUpdateUser/Unique_Email_ID (0.08s)
    --- PASS: TestUpdateUser/Incorrect_Student_ID (0.00s)
=== RUN   TestDeleteUser
=== RUN   TestDeleteUser/Student_ID_does_not_exist

Mock API for Deleting the User - Sending the wrong StudentID
[GIN] 2022/04/01 - 02:30:44 | 400 |     338.084µs |                 | DELETE   /api/v1/user/77


{"error":"Could not find this student ID in our records to Delete"}


    user_test.go:522: Expected to get status 200 but instead got 400
=== RUN   TestDeleteUser/Student_ID_exists

Mock API for Deleting the User - Sending the valid StudentID
[GIN] 2022/04/01 - 02:30:44 | 200 |     758.417µs |                 | DELETE   /api/v1/user/7


{"message":"Success"}


    user_test.go:544: Expected to get status 200 is same ast 200
--- PASS: TestDeleteUser (0.00s)
    --- PASS: TestDeleteUser/Student_ID_does_not_exist (0.00s)
    --- PASS: TestDeleteUser/Student_ID_exists (0.00s)
PASS
coverage: 78.8% of statements
ok      allygator.com/gatorweb/routers/api      0.920s
saisachinkovuru@Sais-MacBook-Pro api % 