saisachinkovuru@Sais-MacBook-Pro api % go test -v -cover
=== RUN   TestAddCourse
=== RUN   TestAddCourse/Empty_JSON_Data

Mock API for Add Course - Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |     337.292µs |                 | POST     "/api/v1/addCourse"
{"error":"EOF"}


    course_test.go:65: Expected to get status 200 but instead got 400
=== RUN   TestAddCourse/Course_ID_Already_exists

Mock API for Add Course - Sending the existing CourseID
[GIN] 2022/03/04 - 15:11:32 | 400 |    2.672708ms |                 | POST     "/api/v1/addCourse"
{"error":"Course already exists with the same course ID"}


    course_test.go:88: Expected to get status 200 but instead got 400
=== RUN   TestAddCourse/Unique_Course_ID

Mock API for Add Course - Sending the unique CourseID
[GIN] 2022/03/04 - 15:11:32 | 200 |     1.37725ms |                 | POST     "/api/v1/addCourse"
{"message":"Success"}


    course_test.go:109: Expected to get status 200 is same ast 200
--- PASS: TestAddCourse (0.01s)
    --- PASS: TestAddCourse/Empty_JSON_Data (0.00s)
    --- PASS: TestAddCourse/Course_ID_Already_exists (0.00s)
    --- PASS: TestAddCourse/Unique_Course_ID (0.00s)
=== RUN   TestGetCourses
=== RUN   TestGetCourses/Wrong_URL

Mock API for getCourses - Sending wrong URL
[GIN] 2022/03/04 - 15:11:32 | 404 |         166ns |                 | GET      "/api/v1/courses"
404 page not found


    course_test.go:149: Expected to get status 200 but instead got 404
=== RUN   TestGetCourses/Valid_URL

Mock API for getCourses - Sending correct URL
[GIN] 2022/03/04 - 15:11:32 | 200 |     600.875µs |                 | GET      "/api/v1/course"


{"data":[{"idCourse":1000,"coursename":"SE","idDepartment":111,"idFaculty":20,"facultyname":"AlinDobra","deptName":"CSE"},{"idCourse":1001,"coursename":"HCI","idDepartment":112,"idFaculty":21,"facultyname":"Jane Doe","deptName":"Psychology"},{"idCourse":2000,"coursename":"Digital Signal Processing","idDepartment":113,"idFaculty":22,"facultyname":"Steph Curry","deptName":"Electrical Engineering"},{"idCourse":3000,"coursename":"Probability and Statistics","idDepartment":114,"idFaculty":23,"facultyname":"Abisheik Patangey","deptName":"Mathematics"},{"idCourse":4000,"coursename":"Project Management","idDepartment":115,"idFaculty":24,"facultyname":"Tejashwini Garlapati","deptName":"Industrial and Systems Engineering"},{"idCourse":5000,"coursename":"Heat and Mass Transfer","idDepartment":116,"idFaculty":25,"facultyname":"Mike Kauffman","deptName":"Mechanical/Aerospace Engineering"},{"idCourse":5001,"coursename":"Operating Systems","idDepartment":111,"idFaculty":20,"facultyname":"AlinDobra","deptName":"CSE"}]}


    course_test.go:170: Expected to get status 200 is same ast 200
--- PASS: TestGetCourses (0.00s)
    --- PASS: TestGetCourses/Wrong_URL (0.00s)
    --- PASS: TestGetCourses/Valid_URL (0.00s)
=== RUN   TestGetCourseById
=== RUN   TestGetCourseById/Incorrect_CourseID

Mock API for getUserById - Sending the incorrect CourseID
[GIN] 2022/03/04 - 15:11:32 | 400 |     462.417µs |                 | GET      "/api/v1/course/111"


{"error":"Could not find this Course ID in our records"}


    course_test.go:211: Expected to get status 200 but instead got 400
=== RUN   TestGetCourseById/Correct_UserID

Mock API for getCourseById - Sending correct CourseID
[GIN] 2022/03/04 - 15:11:32 | 200 |     274.792µs |                 | GET      "/api/v1/course/1000"


{"data":{"idCourse":1000,"coursename":"SE","idDepartment":111,"idFaculty":20,"facultyname":"AlinDobra","deptName":"CSE"}}


    course_test.go:231: Expected to get status 200 is same ast 200
--- PASS: TestGetCourseById (0.00s)
    --- PASS: TestGetCourseById/Incorrect_CourseID (0.00s)
    --- PASS: TestGetCourseById/Correct_UserID (0.00s)
=== RUN   TestUpdateCourse
=== RUN   TestUpdateCourse/Sending_Empty_Data

Mock API for Update Course - Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |     820.583µs |                 | PUT      "/api/v1/course/1000"
{"error":"EOF"}


    course_test.go:273: Expected to get status 200 but instead got 400
=== RUN   TestUpdateCourse/Existing_Course_ID

Mock API for Update Course - Sending the existing Course ID
[GIN] 2022/03/04 - 15:11:32 | 200 |     840.916µs |                 | PUT      "/api/v1/course/1000"
{"message":"Success"}


    course_test.go:294: Expected to get status 200 is same ast 200
=== RUN   TestUpdateCourse/Incorrect_Course_ID

Mock API for Update Course - Sending incorrect CourseID
[GIN] 2022/03/04 - 15:11:32 | 400 |      145.75µs |                 | PUT      "/api/v1/course/77"
{"error":"Could not find this Course ID in our records to Update"}


    course_test.go:318: Expected to get status 200 but instead got 400
--- PASS: TestUpdateCourse (0.00s)
    --- PASS: TestUpdateCourse/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateCourse/Existing_Course_ID (0.00s)
    --- PASS: TestUpdateCourse/Incorrect_Course_ID (0.00s)
=== RUN   TestAddDepartment
=== RUN   TestAddDepartment/Sending_Empty_Data

Mock API for Add Department -  Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |       8.667µs |                 | POST     "/api/v1/addDept"
{"error":"EOF"}


    department_test.go:61: Expected to get status 200 but instead got 400
=== RUN   TestAddDepartment/Department_ID_Already_exists

Mock API for Add Department - Sending the existing DepartmentID
[GIN] 2022/03/04 - 15:11:32 | 400 |         655µs |                 | POST     "/api/v1/addDept"
{"error":"Department already exists with the same department ID"}


    department_test.go:84: Expected to get status 200 but instead got 400
=== RUN   TestAddDepartment/Unique_Department_ID

Mock API for Add Department - Sending the unique DepartmentID
[GIN] 2022/03/04 - 15:11:32 | 200 |     670.875µs |                 | POST     "/api/v1/addDept"
{"message":"Success"}


    department_test.go:105: Expected to get status 200 is same ast 200
--- PASS: TestAddDepartment (0.00s)
    --- PASS: TestAddDepartment/Sending_Empty_Data (0.00s)
    --- PASS: TestAddDepartment/Department_ID_Already_exists (0.00s)
    --- PASS: TestAddDepartment/Unique_Department_ID (0.00s)
=== RUN   TestGetDepartment
=== RUN   TestGetDepartment/Wrong_URL

Mock API for getDepartments - Sending wrong URL
[GIN] 2022/03/04 - 15:11:32 | 404 |         250ns |                 | GET      "/api/v1/departments"
404 page not found


    department_test.go:145: Expected to get status 200 but instead got 404
=== RUN   TestGetDepartment/Valid_URL

Mock API for getDepartments - Sending correct URL
[GIN] 2022/03/04 - 15:11:32 | 200 |     411.167µs |                 | GET      "/api/v1/department"


{"data":[{"idDepartment":111,"deptName":"CSE"},{"idDepartment":112,"deptName":"Psychology"},{"idDepartment":113,"deptName":"Electrical Engineering"},{"idDepartment":114,"deptName":"Mathematics"},{"idDepartment":115,"deptName":"Industrial and Systems Engineering"},{"idDepartment":116,"deptName":"Mechanical/Aerospace Engineering"},{"idDepartment":117,"deptName":"Arts"}]}


    department_test.go:166: Expected to get status 200 is same ast 200
--- PASS: TestGetDepartment (0.00s)
    --- PASS: TestGetDepartment/Wrong_URL (0.00s)
    --- PASS: TestGetDepartment/Valid_URL (0.00s)
=== RUN   TestGetDepartmentById
=== RUN   TestGetDepartmentById/Incorrect_DepartmentID

Mock API for getDepartmentById - Sending the incorrect Department ID
[GIN] 2022/03/04 - 15:11:32 | 400 |      519.75µs |                 | GET      "/api/v1/department/1111"


{"error":"Could not find this Department ID in our records"}


    department_test.go:207: Expected to get status 200 but instead got 400
=== RUN   TestGetDepartmentById/Correct_DepartmentID

Mock API for getDepartmentById - Sending correct departmentID
[GIN] 2022/03/04 - 15:11:32 | 200 |      35.041µs |                 | GET      "/api/v1/department/111"


{"data":{"idDepartment":111,"deptName":"CSE"}}


    department_test.go:227: Expected to get status 200 is same ast 200
--- PASS: TestGetDepartmentById (0.00s)
    --- PASS: TestGetDepartmentById/Incorrect_DepartmentID (0.00s)
    --- PASS: TestGetDepartmentById/Correct_DepartmentID (0.00s)
=== RUN   TestUpdateDepartment
=== RUN   TestUpdateDepartment/Sending_Empty_Data

Mock API for Update Department - Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |     351.833µs |                 | PUT      "/api/v1/department/111"
{"error":"EOF"}


    department_test.go:269: Expected to get status 200 but instead got 400
=== RUN   TestUpdateDepartment/Existing_Department_ID

Mock API for Update Department - Sending the existing Department ID
[GIN] 2022/03/04 - 15:11:32 | 200 |     130.875µs |                 | PUT      "/api/v1/department/111"
{"message":"Success"}


    department_test.go:290: Expected to get status 200 is same ast 200
=== RUN   TestUpdateDepartment/Incorrect_Department_ID

Mock API for Update Department - Sending incorrect DepartmentID
[GIN] 2022/03/04 - 15:11:32 | 400 |      23.708µs |                 | PUT      "/api/v1/department/77"
{"error":"Could not find this Department ID in our records to Update"}


    department_test.go:314: Expected to get status 200 but instead got 400
--- PASS: TestUpdateDepartment (0.00s)
    --- PASS: TestUpdateDepartment/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateDepartment/Existing_Department_ID (0.00s)
    --- PASS: TestUpdateDepartment/Incorrect_Department_ID (0.00s)
=== RUN   TestDeleteDepartment
=== RUN   TestDeleteDepartment/Department_ID_does_not_exist

Mock API for Deleting the Department - Sending the wrong DepartmentID
[GIN] 2022/03/04 - 15:11:32 | 400 |     278.166µs |                 | DELETE   "/api/v1/department/77"


{"error":"Could not find this Department ID in our records to Delete"}


    department_test.go:354: Expected to get status 200 but instead got 400
=== RUN   TestDeleteDepartment/Department_ID_exists

Mock API for Deleting the User - Sending the valid DepartmentID
[GIN] 2022/03/04 - 15:11:32 | 200 |     951.416µs |                 | DELETE   "/api/v1/department/117"


{"message":"Success"}


    department_test.go:376: Expected to get status 200 is same ast 200
--- PASS: TestDeleteDepartment (0.00s)
    --- PASS: TestDeleteDepartment/Department_ID_does_not_exist (0.00s)
    --- PASS: TestDeleteDepartment/Department_ID_exists (0.00s)
=== RUN   TestAddFaculty
=== RUN   TestAddFaculty/Empty_JSON_Data

Mock API for Add Faculty- Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |         6.5µs |                 | POST     "/api/v1/addFaculty"
{"error":"EOF"}


    faculty_test.go:67: Expected to get status 200 but instead got 400
=== RUN   TestAddFaculty/Faculty_ID_Already_exists

Mock API for Add Faculty - Sending the existing FacultyID
[GIN] 2022/03/04 - 15:11:32 | 400 |     618.917µs |                 | POST     "/api/v1/addFaculty"
{"error":"faculty already exists with the same faculty ID"}


    faculty_test.go:90: Expected to get status 200 but instead got 400
=== RUN   TestAddFaculty/Unique_Faculty_ID

Mock API for Add Faculty - Sending the unique FacultyID
[GIN] 2022/03/04 - 15:11:32 | 200 |     594.833µs |                 | POST     "/api/v1/addFaculty"
{"message":"Success"}


    faculty_test.go:111: Expected to get status 200 is same ast 200
--- PASS: TestAddFaculty (0.00s)
    --- PASS: TestAddFaculty/Empty_JSON_Data (0.00s)
    --- PASS: TestAddFaculty/Faculty_ID_Already_exists (0.00s)
    --- PASS: TestAddFaculty/Unique_Faculty_ID (0.00s)
=== RUN   TestGetFaculty
=== RUN   TestGetFaculty/Wrong_URL

Mock API for getFaculty - Sending wrong URL
[GIN] 2022/03/04 - 15:11:32 | 404 |         291ns |                 | GET      "/api/v1/facultys"
404 page not found


    faculty_test.go:151: Expected to get status 200 but instead got 404
=== RUN   TestGetFaculty/Valid_URL

Mock API for getFaculty - Sending correct URL
[GIN] 2022/03/04 - 15:11:32 | 200 |     473.416µs |                 | GET      "/api/v1/faculty"


{"data":[{"idFaculty":20,"facultyname":"AlinDobra","idDepartment":111,"info":"Has 20 years of experience in the Computer Science research domain","deptName":"CSE"},{"idFaculty":21,"facultyname":"Jane Doe","idDepartment":112,"info":"Has 15 years of experience in the understanding people psychology","deptName":"Psychology"},{"idFaculty":22,"facultyname":"Steph Curry","idDepartment":113,"info":"Has 10 years of experience in the Discrete systems and time processing","deptName":"Electrical Engineering"},{"idFaculty":23,"facultyname":"Abisheik Patangey","idDepartment":114,"info":"Subject matter expert in statistics for research","deptName":"Mathematics"},{"idFaculty":24,"facultyname":"Tejashwini Garlapati","idDepartment":115,"info":"Specialist in industrial project management","deptName":"Industrial and Systems Engineering"},{"idFaculty":25,"facultyname":"Mike Kauffman","idDepartment":116,"info":"Dean of mechanical engineering","deptName":"Mechanical/Aerospace Engineering"},{"idFaculty":26,"facultyname":"Sai Srujan Kovuru","idDepartment":111,"info":"Has 7 years of experience in the Computer Science research domain","deptName":"CSE"}]}


    faculty_test.go:172: Expected to get status 200 is same ast 200
--- PASS: TestGetFaculty (0.00s)
    --- PASS: TestGetFaculty/Wrong_URL (0.00s)
    --- PASS: TestGetFaculty/Valid_URL (0.00s)
=== RUN   TestGetFacultyById
=== RUN   TestGetFacultyById/Incorrect_FacultyID

Mock API for getFacultyById - Sending the incorrect FacultyID
[GIN] 2022/03/04 - 15:11:32 | 400 |     322.083µs |                 | GET      "/api/v1/faculty/111"


{"error":"Could not find this Faculty ID in our records"}


    faculty_test.go:213: Expected to get status 200 but instead got 400
=== RUN   TestGetFacultyById/Correct_FacultyID

Mock API for getFacultyById - Sending correct FacultyID
[GIN] 2022/03/04 - 15:11:32 | 200 |        53.5µs |                 | GET      "/api/v1/faculty/20"


{"data":{"idFaculty":20,"facultyname":"AlinDobra","idDepartment":111,"info":"Has 20 years of experience in the Computer Science research domain","deptName":"CSE"}}


    faculty_test.go:233: Expected to get status 200 is same ast 200
--- PASS: TestGetFacultyById (0.00s)
    --- PASS: TestGetFacultyById/Incorrect_FacultyID (0.00s)
    --- PASS: TestGetFacultyById/Correct_FacultyID (0.00s)
=== RUN   TestUpdateFaculty
=== RUN   TestUpdateFaculty/Sending_Empty_Data

Mock API for Update Faculty - Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |     313.333µs |                 | PUT      "/api/v1/faculty/20"
{"error":"EOF"}


    faculty_test.go:275: Expected to get status 200 but instead got 400
=== RUN   TestUpdateFaculty/Existing_Faculty_ID

Mock API for Update Faculty  - Sending the existing Faculty ID
[GIN] 2022/03/04 - 15:11:32 | 200 |      89.667µs |                 | PUT      "/api/v1/faculty/20"
{"message":"Success"}


    faculty_test.go:296: Expected to get status 200 is same ast 200
=== RUN   TestUpdateFaculty/Incorrect_Faculty_ID

Mock API for Update Faculty - Sending incorrect FacultyID
[GIN] 2022/03/04 - 15:11:32 | 400 |      34.792µs |                 | PUT      "/api/v1/faculty/77"
{"error":"Could not find this faculty ID in our records to Update"}


    faculty_test.go:320: Expected to get status 200 but instead got 400
--- PASS: TestUpdateFaculty (0.00s)
    --- PASS: TestUpdateFaculty/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateFaculty/Existing_Faculty_ID (0.00s)
    --- PASS: TestUpdateFaculty/Incorrect_Faculty_ID (0.00s)
=== RUN   TestAddUser
=== RUN   TestAddUser/Empty_JSON_Data

Mock API for Add User - Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |       4.417µs |                 | POST     "/api/v1/register"
{"error":"EOF"}


    user_test.go:83: Expected to get status 200 but instead got 400
=== RUN   TestAddUser/Email_ID_Already_exists

Mock API for Add User - Sending the existing EmailID
[GIN] 2022/03/04 - 15:11:32 | 400 |    1.238375ms |                 | POST     "/api/v1/register"
{"error":"Student already exists with the same email"}


    user_test.go:106: Expected to get status 200 but instead got 400
=== RUN   TestAddUser/Unique_Email_ID

Mock API for Add User - Sending the unique EmailID
[GIN] 2022/03/04 - 15:11:32 | 200 |   79.305791ms |                 | POST     "/api/v1/register"
{"message":"Success"}


    user_test.go:127: Expected to get status 200 is same ast 200
--- PASS: TestAddUser (0.08s)
    --- PASS: TestAddUser/Empty_JSON_Data (0.00s)
    --- PASS: TestAddUser/Email_ID_Already_exists (0.00s)
    --- PASS: TestAddUser/Unique_Email_ID (0.08s)
=== RUN   TestGetUsers
=== RUN   TestGetUsers/Wrong_URL

Mock API for getUsers - Sending wrong URL
[GIN] 2022/03/04 - 15:11:32 | 404 |         250ns |                 | GET      "/api/v1/users"
404 page not found


    user_test.go:167: Expected to get status 200 but instead got 404
=== RUN   TestGetUsers/Valid_URL

Mock API for getUsers - Sending correct URL
[GIN] 2022/03/04 - 15:11:32 | 200 |     577.167µs |                 | GET      "/api/v1/user"


{"data":[{"idStudent":1,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"","email":"kovuru.saisachin@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active"},{"idStudent":2,"firstname":"Prashant","lastname":"Kapri","department":111,"password":"","email":"kapri.prashant@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/prashant-kapri-2b8047122/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active"},{"idStudent":3,"firstname":"Maitreyi","lastname":"Srinivasan","department":111,"password":"","email":"maitreyi.srinivas@ufl.edu","gender":"female","course":"Research methods in HCI","url":"https://www.linkedin.com/ms100","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active"},{"idStudent":4,"firstname":"Noopur","lastname":"Thanvi","department":111,"password":"","email":"thanvi.noopur@ufl.edu","gender":"female","course":"Database systems implementation","url":"https://www.linkedin.com/in/noopurthanvi0208/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active"},{"idStudent":5,"firstname":"Anirudh","lastname":"Srinivasan","department":111,"password":"","email":"anirudh.srinivas@ufl.edu","gender":"male","course":"Human Computer Interaction","url":"https://www.linkedin.com/in/anirudh-srinivasan-46149119a/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"incoming"},{"idStudent":6,"firstname":"Dhrupad","lastname":"Thanvi","department":112,"password":"","email":"thanvi.dhrupad@ufl.edu","gender":"male","course":"Analysis of Algorithms","url":"https://www.linkedin.com/in/noopurthanvi0208/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"incoming"},{"idStudent":7,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"","email":"unique@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active"}]}


    user_test.go:188: Expected to get status 200 is same ast 200
--- PASS: TestGetUsers (0.00s)
    --- PASS: TestGetUsers/Wrong_URL (0.00s)
    --- PASS: TestGetUsers/Valid_URL (0.00s)
=== RUN   TestGetUserById
=== RUN   TestGetUserById/Incorrect_UserID

Mock API for getUserById - Sending the incorrect UserID
[GIN] 2022/03/04 - 15:11:32 | 400 |     377.209µs |                 | GET      "/api/v1/user/111"


{"error":"Could not find this student ID in our records"}


    user_test.go:229: Expected to get status 200 but instead got 400
=== RUN   TestGetUserById/Correct_UserID

Mock API for getUserById - Sending correct userID
[GIN] 2022/03/04 - 15:11:32 | 200 |     209.666µs |                 | GET      "/api/v1/user/1"


{"data":{"idStudent":1,"firstname":"SaiSachin","lastname":"Kovuru","department":111,"password":"qwertyu","email":"kovuru.saisachin@ufl.edu","gender":"male","course":"Software engineering","url":"https://www.linkedin.com/in/saisachinkovuru/","nationality":"Indian","profile":"Cloud","specialization":"Backend","status":"active"}}


    user_test.go:249: Expected to get status 200 is same ast 200
--- PASS: TestGetUserById (0.00s)
    --- PASS: TestGetUserById/Incorrect_UserID (0.00s)
    --- PASS: TestGetUserById/Correct_UserID (0.00s)
=== RUN   TestUpdateUser
=== RUN   TestUpdateUser/Sending_Empty_Data

Mock API for Update User - Sending Empty Data
[GIN] 2022/03/04 - 15:11:32 | 400 |     610.333µs |                 | PUT      "/api/v1/user/1"
{"error":"EOF"}


    user_test.go:291: Expected to get status 200 but instead got 400
=== RUN   TestUpdateUser/Email_ID_Already_exists

Mock API for Update User - Sending the existing EmailID
[GIN] 2022/03/04 - 15:11:32 | 400 |     522.084µs |                 | PUT      "/api/v1/user/6"
{"error":"Email can not be Updated since student with another ID has the same mail ID"}


    user_test.go:314: Expected to get status 200 but instead got 400
=== RUN   TestUpdateUser/Unique_Email_ID

Mock API for Update User - Sending the unique EmailID
[GIN] 2022/03/04 - 15:11:32 | 200 |   78.325625ms |                 | PUT      "/api/v1/user/1"
{"message":"Success"}


    user_test.go:335: Expected to get status 200 is same ast 200
=== RUN   TestUpdateUser/Incorrect_Student_ID

Mock API for Update User - Sending incorrect StudentID
[GIN] 2022/03/04 - 15:11:32 | 400 |     126.666µs |                 | PUT      "/api/v1/user/77"
{"error":"Could not find this student ID in our records to Update"}


    user_test.go:359: Expected to get status 200 but instead got 400
--- PASS: TestUpdateUser (0.08s)
    --- PASS: TestUpdateUser/Sending_Empty_Data (0.00s)
    --- PASS: TestUpdateUser/Email_ID_Already_exists (0.00s)
    --- PASS: TestUpdateUser/Unique_Email_ID (0.08s)
    --- PASS: TestUpdateUser/Incorrect_Student_ID (0.00s)
=== RUN   TestDeleteUser
=== RUN   TestDeleteUser/Student_ID_does_not_exist

Mock API for Deleting the User - Sending the wrong StudentID
[GIN] 2022/03/04 - 15:11:32 | 400 |     487.792µs |                 | DELETE   "/api/v1/user/77"


{"error":"Could not find this student ID in our records to Delete"}


    user_test.go:399: Expected to get status 200 but instead got 400
=== RUN   TestDeleteUser/Student_ID_exists

Mock API for Deleting the User - Sending the valid StudentID
[GIN] 2022/03/04 - 15:11:32 | 200 |     814.708µs |                 | DELETE   "/api/v1/user/7"


{"message":"Success"}


    user_test.go:421: Expected to get status 200 is same ast 200
--- PASS: TestDeleteUser (0.00s)
    --- PASS: TestDeleteUser/Student_ID_does_not_exist (0.00s)
    --- PASS: TestDeleteUser/Student_ID_exists (0.00s)
PASS
coverage: 88.9% of statements
ok      allygator.com/gatorweb/routers/api      0.783s